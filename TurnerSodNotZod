//AUTHOR: Emily Turner
//COURSE: CPT 167
//PURPOSE: This program allows the user to select a discount rate and a type of sod and will produce an item report, an order report, and an end-of-day report.
//STARTDATE: 11/30/2020

package edu.cpt167.turner.exercise6;

import java.util.Scanner;

public class TurnerMainClass 
{
//Declare and initialize all CONSTANTS
	public static final double TAX_RATE = .075;
	public static final String DISCOUNT_NAME_MEMBER = "Member";
	public static final String DISCOUNT_NAME_SENIOR = "Senior";
	public static final String DISCOUNT_NAME_NONE = "No Discount";
	public static final String DISCOUNT_NAME_QUIT = "Quit";
	public static final double DISCOUNT_RATE_MEMBER = 0.15;
	public static final double DISCOUNT_RATE_SENIOR = 0.25;
	public static final double DISCOUNT_RATE_NONE = 0.0;
	public static final String ITEM_NAME_PREMIUM = "Artificial Sod";
	public static final String ITEM_NAME_SPECIAL = "Bermuda Sod";
	public static final String ITEM_NAME_BASIC = "Centipede Sod";
	public static final String ITEM_NAME_RETURN = "Return to Main Menu";
	public static final double ITEM_PRICE_PREMIUM = 55.95;
	public static final double ITEM_PRICE_SPECIAL = 24.95;
	public static final double ITEM_PRICE_BASIC = 15.95;
	public static final int RESET_VALUE = 0;
	
	
	public static void main(String[] args) 
	{
		//VARIABLES
		//Create scanner
		Scanner input = new Scanner(System.in);

		//Declare & initialize all variables
		String userName = "";
		char rateSelection = ' ';
		char itemSelection = ' ';
		int howMany = 0;
		String discountName = "";
		double discountRate = 0.0;
		String itemName = "";
		double itemPrice = 0.0;
		double discountAmount = 0.0;
		double discountPrice = 0.0;
		double subTotal = 0.0;
		double tax = 0.0;
		double totalCost = 0.0;
		int memberCount = 0;
		int seniorCount = 0;
		int noDiscountCount = 0;
		double grandTotal = 0.0;
		int premiumCount = 0;
		int specialCount = 0;
		int basicCount = 0;
		double purchaseAmt = 0.0;
		
		
		//Welcome Banner
		displayWelcomeBanner();
		
		
		//INPUTS
		//User name
		userName = getUserName(input);
		//Rate selection
		rateSelection = validateMainMenu(input);
		
		
		//RUN-WHILE (on rate selection)
		while(rateSelection != 'Q')
		{
			//Get and validate item selection
			itemSelection = validateItemMenu(input);
			
			//REPETITION STRUCTURE on item selection
			while(itemSelection != 'R')
			{
				//Get & validate quantity
				howMany = validateHowMany(input);
				
				
				//Rate selection structure
				if(rateSelection == 'A')
				{
					discountName = DISCOUNT_NAME_MEMBER;
					discountRate = DISCOUNT_RATE_MEMBER;
					memberCount++;
				}//END OF if
				else if(rateSelection == 'B')
				{
					discountName = DISCOUNT_NAME_SENIOR;
					discountRate = DISCOUNT_RATE_SENIOR;
					seniorCount++;
				}//END OF else if
				else
				{
					discountName = DISCOUNT_NAME_NONE;
					discountRate = DISCOUNT_RATE_NONE;
					noDiscountCount++;
				}//END OF else
				
				
				//Item Selection Structure
				if(itemSelection == 'A')
				{
					itemName = ITEM_NAME_PREMIUM;
					itemPrice = ITEM_PRICE_PREMIUM;
					premiumCount++;
				}//END OF if
				
				else if (itemSelection == 'B')
				{
					itemName = ITEM_NAME_SPECIAL;
					itemPrice = ITEM_PRICE_SPECIAL;
					specialCount++;
				}//END OF else if
				else
				{
					itemName = ITEM_NAME_BASIC;
					itemPrice = ITEM_PRICE_BASIC;
					basicCount++;
				}//END OF else
				
				
				//Calculations (for Item Report)
				discountAmount = itemPrice * discountRate;
				discountPrice = itemPrice - discountAmount;
				purchaseAmt = howMany * discountPrice;
				subTotal = subTotal + purchaseAmt;
				
				
				//Display Item Report
				displayItemReceipt(itemName, itemPrice, discountName, discountRate, discountAmount, discountPrice, howMany, purchaseAmt, subTotal);
				
				//Item Menu
				itemSelection = validateItemMenu (input);
								
			}//END OF repetition structure on item selection
			
			
			//Calculations (for Order Report)
			tax = subTotal * TAX_RATE;
			totalCost = subTotal + tax;
			grandTotal = grandTotal + totalCost;
			
			//Display Order Report
			displayOrderTotal(userName, subTotal, tax, totalCost);
			
			//Reset subtotal
			subTotal = RESET_VALUE;
			
			//go back to rate selection
			rateSelection = validateMainMenu(input);
			
		}//END OF RUN WHILE (on rate selection)
		
		
		//Determine whether or not to show final report
		if(grandTotal > 0.0)
		{
			displayFinalReport(memberCount, seniorCount, noDiscountCount, premiumCount, specialCount, basicCount, grandTotal);
		}//END OF if
		
		
		//Farewell Message
		displayFarewellMessage();
		
	//Close scanner
		input.close();
	}//END OF main method
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//VOID METHODS
	//Welcome Banner
	public static void displayWelcomeBanner()
	{
		System.out.println("Welcome to Sod Depot!");
		System.out.println("Just select your item and discount,");
		System.out.println("And we'll compute the total for your order.");
	}//END OF Welcome Banner
	
	
	//Farewell Message
	public static void displayFarewellMessage()
	{
		System.out.println("Thank you!");
		System.out.println("Have a great day!");
	}//END OF Farewell Message
	
	
	
	//Display Item Receipt (Item Report)
	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmount, double borrowedDiscountPrice, int borrowedHowMany, double borrowedPurchaseAmt, double borrowedSubTotal)
	{
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ITEM REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-20s%-15s\n", "Item Name", borrowedItemName);
		System.out.printf("%-20s%1s%9.2f\n", "Original Price", "$", borrowedItemPrice);
		System.out.printf("%-20s%-15s\n", "Discount Type", borrowedDiscountName);
		System.out.printf("%-20s%1s%8.1f%2s\n", "Discount Rate", "", borrowedDiscountRate*100, "%");
		System.out.printf("%-20s%1s%9.2f\n", "Discount Amount", "$", borrowedDiscountAmount);
		System.out.printf("%-20s%1s%9.2f\n", "Discounted Price", "$", borrowedDiscountPrice);
		System.out.printf("%-20s%1s%9d\n", "Quantity", "", borrowedHowMany);
		System.out.printf("%-20s%1s%9.2f\n", "Purchase Amount", "$", borrowedPurchaseAmt);
		System.out.printf("%-20s%1s%9.2f\n", "Subtotal", "$", borrowedSubTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//END OF Item Report


	
	//Display Order Total (Order Report)
	public static void displayOrderTotal(String borrowedUserName, double borrowedSubTotal, double borrowedTax, double borrowedTotalCost)
	{
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-18s%-10s\n", "User", borrowedUserName);
		System.out.printf("%-18s%1s%9.2f\n", "Subtotal", "$", borrowedSubTotal);
		System.out.printf("%-18s%1s%9.2f\n", "Tax", "$", borrowedTax);
		System.out.printf("%-18s%1s%9.2f\n", "Total Cost", "$", borrowedTotalCost);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//END OF Order Report
	
	
	
	//Display Final Report (Final Report)
	public static void displayFinalReport(int borrowedMemberCount, int borrowedSeniorCount, int borrowedNoDiscountCount, int borrowedPremiumCount, int borrowedSpecialCount, int borrowedBasicCount, double borrowedGrandTotal)
	{
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Count of discount types:");
		System.out.printf("%-20s%9d\n", DISCOUNT_NAME_MEMBER, borrowedMemberCount);
		System.out.printf("%-20s%9d\n", DISCOUNT_NAME_SENIOR, borrowedSeniorCount);
		System.out.printf("%-20s%9d\n", DISCOUNT_NAME_NONE, borrowedNoDiscountCount);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.println("Count of item types:");
		System.out.printf("%-20s%9d\n", ITEM_NAME_PREMIUM, borrowedPremiumCount);
		System.out.printf("%-20s%9d\n", ITEM_NAME_SPECIAL, borrowedSpecialCount);
		System.out.printf("%-20s%9d\n", ITEM_NAME_BASIC, borrowedBasicCount);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
		System.out.printf("%-19s%1s%9.2f\n", "Grand Total", "$", borrowedGrandTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~");
	}//END OF Final Report
	
	
	
	//Display Main Menu (Discount Menu)
	public static void displayMainMenu()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");
		System.out.printf("%-4s%-19s%4.1f%1s\n", "[A]", "for " + DISCOUNT_NAME_MEMBER, DISCOUNT_RATE_MEMBER*100, "%");
		System.out.printf("%-4s%-19s%4.1f%1s\n", "[B]", "for " + DISCOUNT_NAME_SENIOR, DISCOUNT_RATE_SENIOR*100, "%");
		System.out.printf("%-4s%-19s%4.1f%1s\n", "[C]", "for " + DISCOUNT_NAME_NONE, DISCOUNT_RATE_NONE*100, "%");
		System.out.printf("%-4s%-19s%4S%1s\n", "[Q]", "to " + DISCOUNT_NAME_QUIT, "", "");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//END OF Main Menu (Discount Menu)
	
	
	
	//Display Item Menu
	public static void displayItemMenu()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ITEM MENU");
		System.out.printf("%-4s%-24s%1s%6.2f\n", "[A]", "for " + ITEM_NAME_PREMIUM, "$", ITEM_PRICE_PREMIUM);
		System.out.printf("%-4s%-24s%1s%6.2f\n", "[B]", "for " + ITEM_NAME_SPECIAL, "$", ITEM_PRICE_SPECIAL);
		System.out.printf("%-4s%-24s%1s%6.2f\n", "[C]", "for " + ITEM_NAME_BASIC, "$", ITEM_PRICE_BASIC);
		System.out.printf("%-4s%-31s\n", "[R]", "to " + ITEM_NAME_RETURN);
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}//END OF Item Menu
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//VR METHODS
	//Get userName
	public static String getUserName(Scanner borrowedInput)
	{
		//Declare & initialize local variable
		String localUserName = "";
		//INPUT local userName
		System.out.print("Name: ");
		localUserName = borrowedInput.nextLine();
		//RETURN localUserName
		return localUserName;
	}//END OF get userName
		
	
	
	//Validate Main Menu (Discount menu)
	public static char validateMainMenu(Scanner borrowedInput)
	{
		//Declare & initialize local variable
		char localSelection = ' ';
		//DISPLAY Discount Menu 
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0); //Prime read for selection
		//VALIDATION LOOP
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'C' && localSelection != 'Q')
		{
			System.out.println("Invalid entry. Please select a letter from the menu."); //Error message
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);//Update read - updates LCV
		}//END OF validation loop		
		//RETURN localSelection
		return localSelection;		
	}//END OF Validate Main Menu (discount menu)
	
	
	
	//Validate Item Menu
	public static char validateItemMenu(Scanner borrowedInput)
	{
		//Declare & initialize local variable
		char localSelection = ' ';
		//DISPLAY Item Menu
		displayItemMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0); //Prime read for selection
		//VALIDATION LOOP
		while(localSelection != 'A' && localSelection != 'B' && localSelection != 'C' && localSelection != 'R')
		{
			System.out.println("Invalid entry. Please select a letter from the menu."); //Error message
			displayItemMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);//Update read - updates LCV
		}//END OF validation loop		
		//RETURN localSelection
		return localSelection;
	}//END OF Validate Item Menu
	
	
	
	//Validate Quantity
	public static int validateHowMany(Scanner borrowedInput)
	{
		//Declare & initialize local variable
		int localHowMany = 0;
		//INPUT localHowMany
		System.out.print("Quantity: ");
		localHowMany = borrowedInput.nextInt();//prime read
		//VALIDATION LOOP
		while(localHowMany <= 0)
		{
			System.out.println("Invalid entry. Please select a number greater than 0."); //Error message
			System.out.print("Quantity: ");
			localHowMany = borrowedInput.nextInt();//Update read - updates LCV
		}//END OF validation loop
		//RETURN localHowMany
		return localHowMany;
	}//END OF Validate Quantity
}//END OF class
